"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .taskcreate import TaskCreate, TaskCreateTypedDict
from dbrsdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Dict, List
from typing_extensions import NotRequired, TypedDict


class WorkItemCreateTypedDict(TypedDict):
    organization_id: str
    r"""Organization ID"""
    title: str
    r"""Work item title"""
    estimated_total_hours: float
    r"""Estimated total hours"""
    collection_id: NotRequired[Nullable[str]]
    r"""Collection ID (optional)"""
    description: NotRequired[Nullable[str]]
    r"""Work item description"""
    status: NotRequired[Nullable[str]]
    r"""Work item status"""
    priority: NotRequired[Nullable[str]]
    r"""Work item priority"""
    ccr_hours_required: NotRequired[Nullable[Dict[str, float]]]
    r"""CCR hours required"""
    estimated_sales_price: NotRequired[Nullable[float]]
    r"""Estimated sales price"""
    estimated_variable_cost: NotRequired[Nullable[float]]
    r"""Estimated variable cost"""
    tasks: NotRequired[Nullable[List[TaskCreateTypedDict]]]
    r"""Initial tasks"""
    responsible_user_id: NotRequired[Nullable[str]]
    r"""Responsible user ID"""
    url: NotRequired[Nullable[str]]
    r"""External URL"""


class WorkItemCreate(BaseModel):
    organization_id: str
    r"""Organization ID"""

    title: str
    r"""Work item title"""

    estimated_total_hours: float
    r"""Estimated total hours"""

    collection_id: OptionalNullable[str] = UNSET
    r"""Collection ID (optional)"""

    description: OptionalNullable[str] = UNSET
    r"""Work item description"""

    status: OptionalNullable[str] = UNSET
    r"""Work item status"""

    priority: OptionalNullable[str] = UNSET
    r"""Work item priority"""

    ccr_hours_required: OptionalNullable[Dict[str, float]] = UNSET
    r"""CCR hours required"""

    estimated_sales_price: OptionalNullable[float] = UNSET
    r"""Estimated sales price"""

    estimated_variable_cost: OptionalNullable[float] = UNSET
    r"""Estimated variable cost"""

    tasks: OptionalNullable[List[TaskCreate]] = UNSET
    r"""Initial tasks"""

    responsible_user_id: OptionalNullable[str] = UNSET
    r"""Responsible user ID"""

    url: OptionalNullable[str] = UNSET
    r"""External URL"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "collection_id",
            "description",
            "status",
            "priority",
            "ccr_hours_required",
            "estimated_sales_price",
            "estimated_variable_cost",
            "tasks",
            "responsible_user_id",
            "url",
        ]
        nullable_fields = [
            "collection_id",
            "description",
            "status",
            "priority",
            "ccr_hours_required",
            "estimated_sales_price",
            "estimated_variable_cost",
            "tasks",
            "responsible_user_id",
            "url",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
