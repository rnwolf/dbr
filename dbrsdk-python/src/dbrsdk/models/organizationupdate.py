"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dbrsdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class OrganizationUpdateTypedDict(TypedDict):
    r"""Schema for updating an organization"""

    name: NotRequired[Nullable[str]]
    r"""Organization name"""
    description: NotRequired[Nullable[str]]
    r"""Organization description"""
    contact_email: NotRequired[Nullable[str]]
    r"""Contact email address"""
    country: NotRequired[Nullable[str]]
    r"""ISO country code"""
    subscription_level: NotRequired[Nullable[str]]
    r"""Subscription level"""
    status: NotRequired[Nullable[str]]
    r"""Organization status"""


class OrganizationUpdate(BaseModel):
    r"""Schema for updating an organization"""

    name: OptionalNullable[str] = UNSET
    r"""Organization name"""

    description: OptionalNullable[str] = UNSET
    r"""Organization description"""

    contact_email: OptionalNullable[str] = UNSET
    r"""Contact email address"""

    country: OptionalNullable[str] = UNSET
    r"""ISO country code"""

    subscription_level: OptionalNullable[str] = UNSET
    r"""Subscription level"""

    status: OptionalNullable[str] = UNSET
    r"""Organization status"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "description",
            "contact_email",
            "country",
            "subscription_level",
            "status",
        ]
        nullable_fields = [
            "name",
            "description",
            "contact_email",
            "country",
            "subscription_level",
            "status",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
