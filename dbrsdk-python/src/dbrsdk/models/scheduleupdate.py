"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from dbrsdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class ScheduleUpdateTypedDict(TypedDict):
    status: NotRequired[Nullable[str]]
    r"""Schedule status"""
    work_item_ids: NotRequired[Nullable[List[str]]]
    r"""Updated work item IDs"""
    time_unit_position: NotRequired[Nullable[int]]
    r"""Time unit position"""
    released_date: NotRequired[Nullable[datetime]]
    r"""Released date"""
    completion_date: NotRequired[Nullable[datetime]]
    r"""Completion date"""


class ScheduleUpdate(BaseModel):
    status: OptionalNullable[str] = UNSET
    r"""Schedule status"""

    work_item_ids: OptionalNullable[List[str]] = UNSET
    r"""Updated work item IDs"""

    time_unit_position: OptionalNullable[int] = UNSET
    r"""Time unit position"""

    released_date: OptionalNullable[datetime] = UNSET
    r"""Released date"""

    completion_date: OptionalNullable[datetime] = UNSET
    r"""Completion date"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "status",
            "work_item_ids",
            "time_unit_position",
            "released_date",
            "completion_date",
        ]
        nullable_fields = [
            "status",
            "work_item_ids",
            "time_unit_position",
            "released_date",
            "completion_date",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
