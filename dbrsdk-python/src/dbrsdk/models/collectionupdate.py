"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .collectionstatus import CollectionStatus
from .collectiontype import CollectionType
from dbrsdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CollectionUpdateTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""Collection name"""
    description: NotRequired[Nullable[str]]
    r"""Collection description"""
    type: NotRequired[Nullable[CollectionType]]
    r"""Collection type"""
    status: NotRequired[Nullable[CollectionStatus]]
    r"""Collection status"""
    estimated_sales_price: NotRequired[Nullable[float]]
    r"""Estimated sales price"""
    estimated_variable_cost: NotRequired[Nullable[float]]
    r"""Estimated variable cost"""


class CollectionUpdate(BaseModel):
    name: OptionalNullable[str] = UNSET
    r"""Collection name"""

    description: OptionalNullable[str] = UNSET
    r"""Collection description"""

    type: OptionalNullable[CollectionType] = UNSET
    r"""Collection type"""

    status: OptionalNullable[CollectionStatus] = UNSET
    r"""Collection status"""

    estimated_sales_price: OptionalNullable[float] = UNSET
    r"""Estimated sales price"""

    estimated_variable_cost: OptionalNullable[float] = UNSET
    r"""Estimated variable cost"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "description",
            "type",
            "status",
            "estimated_sales_price",
            "estimated_variable_cost",
        ]
        nullable_fields = [
            "name",
            "description",
            "type",
            "status",
            "estimated_sales_price",
            "estimated_variable_cost",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
